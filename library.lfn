not -> nand(#0, 1)

and -> not(nand(#0, #1))

or -> nand(nand(#0, #0), nand(#1, #1))

nor -> nand(or(#0, #1), or(#0, #1))

xor -> nand(nand(nand(#0, #1), #0), nand(nand(#0, #1), #1))

zero -> eq(#0, 0)

less -> le(#0, #1)

leq -> or(less(#0, #1), eq(#0, #1))

even -> not(mod(int(#0), int(2)))

odd -> not(even(#0))

geq -> not(le(#0, #1))

gr -> and(geq(#0, #1), not(eq(#0, #1)))

greater -> gr(#0, #1)

equals -> eq(#0, #1)

empty -> not(length(#0))

elem -> if(empty(#1), 0, or(eq(#0, head(#1)), elem(#0, tail(#1))))

sum -> if(empty(#0), 0, add(head(#0), sum(tail(#0))))

take -> if (not(#0), [], if (empty(#1), [],
    concat([head(#1)], take(sub(#0, 1), tail(#1)))
))

insertionSort -> if (empty(#0), [], insert(head(#0), insertionSort(tail(#0))))
insert -> if(empty(#1),
             [#0],
                if(leq(#0, head(#1)),
                    concat([#0], #1),
                    concat([head(#1)], insert(#0, tail(#1)))
                )
)

isPrime -> if(
    le(#0, mul(#1, #1)),
    1,
    if (not(mod(int(#0), #1)),
        0,
        isPrime(#0, add(#1, 1))
    )
)